import { ResultSetHeader, RowDataPacket } from "mysql2/promise";

// Sql-translator responses
export type LanguageToSQLSuccessResponse = {
  status: "success";
  question: string;
  sqlStatement: string; // The SQL statement generated by OpenAI
  formattedAnswer: string; // The formatted, user-friendly answer generated by OpenAI
  rawData: RowDataPacket[] | ResultSetHeader; // The raw data returned from the SQL query
};

export type LanguageToSQLErrorResponse = {
  status: "error";
  errorCode:
    | "NO_QUERY_ERR" // When no query is provided in the request
    | "PROCESSING_ERR" // For errors during OpenAI or SQL processing
    | "UNSUPPORTED_QUERY_ERR" // When the query is not a SELECT statement
    | "DATABASE_ERR" // When there is a database-related error
    | "AI_PROCESSING_ERROR";
};

export type LanguageToSQLResponse =
  | LanguageToSQLSuccessResponse
  | LanguageToSQLErrorResponse;

// Error handling
const errorMessagesMap: Record<
  LanguageToSQLErrorResponse["errorCode"],
  string
> = {
  NO_QUERY_ERR: "Nie podano zapytania. Proszę spróbować ponownie.",
  PROCESSING_ERR:
    "Wystąpił błąd podczas przetwarzania zapytania. Spróbuj ponownie później.",
  UNSUPPORTED_QUERY_ERR:
    "Zapytanie jest nieobsługiwane. Proszę upewnić się, że jest to zapytanie SELECT.",
  DATABASE_ERR: "Wystąpił problem z bazą danych. Spróbuj ponownie później.",
  AI_PROCESSING_ERROR:
    "Wystąpił błąd podczas przetwarzania AI. Spróbuj ponownie później.",
};

export function getUserFriendlyMessage(
  errorCode: LanguageToSQLErrorResponse["errorCode"]
): string {
  return (
    errorMessagesMap[errorCode] ||
    "Wystąpił nieoczekiwany błąd. Proszę spróbować ponownie."
  );
}

// Db schemas
export type DbSchema = {
  schemaVersion: string;
  tables: Table[];
};

type Table = {
  name: string;
  columns: Column[];
};

type Column = {
  name: string;
  type: string;
  exampleDistinctValues: (string | number)[];
};

export type Example = {
  userQuery: string;
  aiAnswer: {
    isSelect: boolean;
    sqlStatement: string;
  };
};

export type ChatHistory = {
  query: string,
  answer: string,
  created_at: string,
}
